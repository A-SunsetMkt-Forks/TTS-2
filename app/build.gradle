plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 32
    buildToolsVersion '32.0.0'
    //签名设置
    signingConfigs {
        release {
            keyAlias 'key'
            keyPassword '1234567890'
            storeFile file('../public.jks')
            storePassword '1234567890'
        }
        debug {
            keyAlias 'key'
            keyPassword '1234567890'
            storeFile file('../public.jks')
            storePassword '1234567890'
        }
    }

    defaultConfig {
        applicationId "me.ag2s.tts"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "0.2_${releaseTime()}"

    }

    buildTypes {
        release {
            minifyEnabled true
            // 启用资源缩减
            shrinkResources true
            // Zipalign优化
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            // 启用资源缩减
            shrinkResources false
            // Zipalign优化
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }




    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dependenciesInfo {
        includeInApk true
        includeInBundle false
    }

    android.applicationVariants.all {
        variant ->

            variant.outputs.all { output ->
                def buildType = variant.buildType.name
                println("buildType=" + buildType)
                if (buildType != "debug") {
                    //apk默认路径
                    String defaultOutputApkPath =
                            variant.getPackageApplicationProvider().get().outputDirectory.getAsFile().get().getPath() +
                                    File.separator
                    println("defaultOutputApkPath=" + defaultOutputApkPath)
                   //在项目根目录创建apk文件夹
                    def outputFileDir = new File("$rootDir" + File.separator, "release")
//                    println("outputFileDir=" + outputFileDir)
                    //设置自定义apk生成路径
                    variant.getPackageApplicationProvider().get().outputDirectory = outputFileDir
                }
            }


            def path = ((project.name != "app") ? project.name : rootProject.name.replace(" ", "")) + "_" +
                    variant.buildType.name + "_" +
                    "v"+variant.versionName + ".apk"
            variant.outputs.forEach {

                it.outputFileName = path
            }


    }




}

tasks.whenTaskAdded {task ->
    //新版的AGP7.1.0修改apk输出路径会导致文件找不到而出错（硬编码？？？），暂时禁用这个task
    if(task.name.contains("createReleaseApkListingFileRedirect")) {
        task.enabled = false
    }
}

dependencies {


    implementation "androidx.recyclerview:recyclerview:1.2.1"

    //An HTTP & HTTP/2 client for Android and Java applications.
    //noinspection GradleDependency
    implementation "com.squareup.okhttp3:okhttp:4.9.3"
    implementation "com.squareup.okhttp3:okhttp-dnsoverhttps:4.9.3"
}

static def releaseTime() {

    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))

}